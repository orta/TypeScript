=== tests/cases/conformance/types/spread/spreadOverwritesPropertyStrict.ts ===
declare var ab: { a: number, b: number };
>ab : { a: number; b: number; }
>a : number
>b : number

declare var abq: { a: number, b?: number };
>abq : { a: number; b?: number | undefined; }
>a : number
>b : number | undefined

var unused1 = { b: 1, ...ab } // error
>unused1 : { a: number; b: number; }
>{ b: 1, ...ab } : { a: number; b: number; }
>b : number
>1 : 1
>ab : { a: number; b: number; }

var unused2 = { ...ab, ...ab } // ok, overwritten error doesn't apply to spreads
>unused2 : { a: number; b: number; }
>{ ...ab, ...ab } : { a: number; b: number; }
>ab : { a: number; b: number; }
>ab : { a: number; b: number; }

var unused3 = { b: 1, ...abq } // ok, abq might have b: undefined
>unused3 : { a: number; b: number; }
>{ b: 1, ...abq } : { a: number; b: number; }
>b : number
>1 : 1
>abq : { a: number; b?: number | undefined; }

var unused4 = { ...ab, b: 1 } // ok, we don't care that b in ab is overwritten
>unused4 : { b: number; a: number; }
>{ ...ab, b: 1 } : { b: number; a: number; }
>ab : { a: number; b: number; }
>b : number
>1 : 1

var unused5 = { ...abq, b: 1 } // ok
>unused5 : { b: number; a: number; }
>{ ...abq, b: 1 } : { b: number; a: number; }
>abq : { a: number; b?: number | undefined; }
>b : number
>1 : 1

function g(obj: { x: number | undefined }) {
>g : (obj: { x: number | undefined; }) => { x: number | undefined; }
>obj : { x: number | undefined; }
>x : number | undefined

    return { x: 1, ...obj }; // ok, obj might have x: undefined
>{ x: 1, ...obj } : { x: number | undefined; }
>x : number
>1 : 1
>obj : { x: number | undefined; }
}
function f(obj: { x: number } | undefined) {
>f : (obj: { x: number; } | undefined) => { x: number; }
>obj : { x: number; } | undefined
>x : number

    return { x: 1, ...obj }; // ok, obj might be undefined
>{ x: 1, ...obj } : { x: number; }
>x : number
>1 : 1
>obj : { x: number; } | undefined
}
function h(obj: { x: number } | { x: string }) {
>h : (obj: { x: number; } | { x: string; }) => { x: number; } | { x: string; }
>obj : { x: number; } | { x: string; }
>x : number
>x : string

    return { x: 1, ...obj } // error
>{ x: 1, ...obj } : { x: number; } | { x: string; }
>x : number
>1 : 1
>obj : { x: number; } | { x: string; }
}

