===================================================================
JsFile: recursiveClassReferenceTest.js
mapUrl: recursiveClassReferenceTest.js.map
sourceRoot: 
sources: recursiveClassReferenceTest.ts
===================================================================
-------------------------------------------------------------------
emittedFile:tests/cases/compiler/recursiveClassReferenceTest.js
sourceFile:recursiveClassReferenceTest.ts
-------------------------------------------------------------------
>>>// Scenario 1: Test reqursive function call with "this" parameter
1 >
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                                 ^^^^^^^^^^->
1 >
2 >// Scenario 1: Test reqursive function call with "this" parameter
1 >Emitted(1, 1) Source(1, 1) + SourceIndex(0)
2 >Emitted(1, 66) Source(1, 66) + SourceIndex(0)
---
>>>// Scenario 2: Test recursive function call with cast and "this" parameter
1->
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1->
  >
2 >// Scenario 2: Test recursive function call with cast and "this" parameter
1->Emitted(2, 1) Source(2, 1) + SourceIndex(0)
2 >Emitted(2, 75) Source(2, 75) + SourceIndex(0)
---
>>>var __extends = (this && this.__extends) || (function () {
>>>    var extendStatics = function (d, b) {
>>>        extendStatics = Object.setPrototypeOf ||
>>>            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
>>>            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
>>>        return extendStatics(d, b);
>>>    };
>>>    return function (d, b) {
>>>        extendStatics(d, b);
>>>        function __() { this.constructor = d; }
>>>        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
>>>    };
>>>})();
>>>
>>>
>>>
>>>var Sample;
1 >
2 >^^^^
3 >    ^^^^^^
4 >          ^
5 >           ^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >
  >
  >
  >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >
2 >module 
3 >    Sample
4 >          .Actions.Thing.Find {
  >          	export class StartFindAction implements Sample.Thing.IAction {
  >          		
  >          		public getId() { return "yo"; }
  >          		
  >          		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >          
  >          			return true;
  >          		}
  >          	}
  >          }
1 >Emitted(19, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(19, 5) Source(32, 8) + SourceIndex(0)
3 >Emitted(19, 11) Source(32, 14) + SourceIndex(0)
4 >Emitted(19, 12) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {var Actions;
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^^
5 >                    ^^^^
6 >                        ^^^^^^^
7 >                               ^
8 >                                ^^^^->
1->
2 >module 
3 >           Sample
4 >                 .
5 >                    
6 >                        Actions
7 >                               .Thing.Find {
  >                               	export class StartFindAction implements Sample.Thing.IAction {
  >                               		
  >                               		public getId() { return "yo"; }
  >                               		
  >                               		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                               
  >                               			return true;
  >                               		}
  >                               	}
  >                               }
1->Emitted(20, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(20, 12) Source(32, 8) + SourceIndex(0)
3 >Emitted(20, 18) Source(32, 14) + SourceIndex(0)
4 >Emitted(20, 21) Source(32, 15) + SourceIndex(0)
5 >Emitted(20, 25) Source(32, 15) + SourceIndex(0)
6 >Emitted(20, 32) Source(32, 22) + SourceIndex(0)
7 >Emitted(20, 33) Source(42, 2) + SourceIndex(0)
---
>>>    (function (Actions) {var Thing;
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^^^
4 >                      ^^^
5 >                         ^^^^
6 >                             ^^^^^
7 >                                  ^
8 >                                   ^^^^->
1->
2 >    
3 >               Actions
4 >                      .
5 >                         
6 >                             Thing
7 >                                  .Find {
  >                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                  		
  >                                  		public getId() { return "yo"; }
  >                                  		
  >                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                  
  >                                  			return true;
  >                                  		}
  >                                  	}
  >                                  }
1->Emitted(21, 5) Source(32, 15) + SourceIndex(0)
2 >Emitted(21, 16) Source(32, 15) + SourceIndex(0)
3 >Emitted(21, 23) Source(32, 22) + SourceIndex(0)
4 >Emitted(21, 26) Source(32, 23) + SourceIndex(0)
5 >Emitted(21, 30) Source(32, 23) + SourceIndex(0)
6 >Emitted(21, 35) Source(32, 28) + SourceIndex(0)
7 >Emitted(21, 36) Source(42, 2) + SourceIndex(0)
---
>>>        (function (Thing_1) {var Find;
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
4 >                          ^^^
5 >                             ^^^^
6 >                                 ^^^^
7 >                                     ^
1->
2 >        
3 >                   Thing
4 >                          .
5 >                             
6 >                                 Find
7 >                                      {
  >                                     	export class StartFindAction implements Sample.Thing.IAction {
  >                                     		
  >                                     		public getId() { return "yo"; }
  >                                     		
  >                                     		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                     
  >                                     			return true;
  >                                     		}
  >                                     	}
  >                                     }
1->Emitted(22, 9) Source(32, 23) + SourceIndex(0)
2 >Emitted(22, 20) Source(32, 23) + SourceIndex(0)
3 >Emitted(22, 27) Source(32, 28) + SourceIndex(0)
4 >Emitted(22, 30) Source(32, 29) + SourceIndex(0)
5 >Emitted(22, 34) Source(32, 29) + SourceIndex(0)
6 >Emitted(22, 38) Source(32, 33) + SourceIndex(0)
7 >Emitted(22, 39) Source(42, 2) + SourceIndex(0)
---
>>>            (function (Find) {
1 >^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^
4 >                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >            
3 >                       Find
1 >Emitted(23, 13) Source(32, 29) + SourceIndex(0)
2 >Emitted(23, 24) Source(32, 29) + SourceIndex(0)
3 >Emitted(23, 28) Source(32, 33) + SourceIndex(0)
---
>>>                var StartFindAction = /** @class */ (function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1-> {
  >	
1->Emitted(24, 17) Source(33, 2) + SourceIndex(0)
---
>>>                    function StartFindAction() {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^->
1->
1->Emitted(25, 21) Source(33, 2) + SourceIndex(0)
---
>>>                    }
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	
2 >                    }
1->Emitted(26, 21) Source(41, 2) + SourceIndex(0)
2 >Emitted(26, 22) Source(41, 3) + SourceIndex(0)
---
>>>                    StartFindAction.prototype.getId = function () { return "yo"; };
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                   ^^^
4 >                                                      ^^^^^^^^^^^^^^
5 >                                                                    ^^^^^^^
6 >                                                                           ^^^^
7 >                                                                               ^
8 >                                                                                ^
9 >                                                                                 ^
1->
2 >                    getId
3 >                                                   
4 >                                                      public getId() { 
5 >                                                                    return 
6 >                                                                           "yo"
7 >                                                                               ;
8 >                                                                                 
9 >                                                                                 }
1->Emitted(27, 21) Source(35, 10) + SourceIndex(0)
2 >Emitted(27, 52) Source(35, 15) + SourceIndex(0)
3 >Emitted(27, 55) Source(35, 3) + SourceIndex(0)
4 >Emitted(27, 69) Source(35, 20) + SourceIndex(0)
5 >Emitted(27, 76) Source(35, 27) + SourceIndex(0)
6 >Emitted(27, 80) Source(35, 31) + SourceIndex(0)
7 >Emitted(27, 81) Source(35, 32) + SourceIndex(0)
8 >Emitted(27, 82) Source(35, 33) + SourceIndex(0)
9 >Emitted(27, 83) Source(35, 34) + SourceIndex(0)
---
>>>
>>>                    StartFindAction.prototype.run = function (Thing) {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                 ^^^
4 >                                                    ^^^^^^^^^^
5 >                                                              ^^^^^
1 >
  >		
  >		public 
2 >                    run
3 >                                                 
4 >                                                    public run(
5 >                                                              Thing:Sample.Thing.ICodeThing
1 >Emitted(29, 21) Source(37, 10) + SourceIndex(0)
2 >Emitted(29, 50) Source(37, 13) + SourceIndex(0)
3 >Emitted(29, 53) Source(37, 3) + SourceIndex(0)
4 >Emitted(29, 63) Source(37, 14) + SourceIndex(0)
5 >Emitted(29, 68) Source(37, 43) + SourceIndex(0)
---
>>>
>>>                        return true;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^
1 >):boolean {
  >
  >			
2 >                        return 
3 >                               true
4 >                                   ;
1 >Emitted(31, 25) Source(39, 4) + SourceIndex(0)
2 >Emitted(31, 32) Source(39, 11) + SourceIndex(0)
3 >Emitted(31, 36) Source(39, 15) + SourceIndex(0)
4 >Emitted(31, 37) Source(39, 16) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(32, 21) Source(40, 3) + SourceIndex(0)
2 >Emitted(32, 22) Source(40, 4) + SourceIndex(0)
---
>>>                    return StartFindAction;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^
1->
  >	
2 >                    }
1->Emitted(33, 21) Source(41, 2) + SourceIndex(0)
2 >Emitted(33, 43) Source(41, 3) + SourceIndex(0)
---
>>>                }());
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^
5 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                 export class StartFindAction implements Sample.Thing.IAction {
  >                 		
  >                 		public getId() { return "yo"; }
  >                 		
  >                 		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                 
  >                 			return true;
  >                 		}
  >                 	}
1 >Emitted(34, 17) Source(41, 2) + SourceIndex(0)
2 >Emitted(34, 18) Source(41, 3) + SourceIndex(0)
3 >Emitted(34, 18) Source(33, 2) + SourceIndex(0)
4 >Emitted(34, 22) Source(41, 3) + SourceIndex(0)
---
>>>                Find.StartFindAction = StartFindAction;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^
3 >                                    ^^^^^^^^^^^^^^^^^^
4 >                                                      ^
5 >                                                       ^^^^^->
1->
2 >                StartFindAction
3 >                                     implements Sample.Thing.IAction {
  >                                    		
  >                                    		public getId() { return "yo"; }
  >                                    		
  >                                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                    
  >                                    			return true;
  >                                    		}
  >                                    	}
4 >                                                      
1->Emitted(35, 17) Source(33, 15) + SourceIndex(0)
2 >Emitted(35, 37) Source(33, 30) + SourceIndex(0)
3 >Emitted(35, 55) Source(41, 3) + SourceIndex(0)
4 >Emitted(35, 56) Source(41, 3) + SourceIndex(0)
---
>>>            })(Find = Thing_1.Find || (Thing_1.Find = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^
5 >                   ^^^
6 >                      ^^^^^^^^^^^^
7 >                                  ^^^^^
8 >                                       ^^^^^^^^^^^^
9 >                                                   ^^^^^^^^
1->
  >
2 >            }
3 >             
4 >               Find
5 >                   
6 >                      Find
7 >                                  
8 >                                       Find
9 >                                                    {
  >                                                   	export class StartFindAction implements Sample.Thing.IAction {
  >                                                   		
  >                                                   		public getId() { return "yo"; }
  >                                                   		
  >                                                   		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                   
  >                                                   			return true;
  >                                                   		}
  >                                                   	}
  >                                                   }
1->Emitted(36, 13) Source(42, 1) + SourceIndex(0)
2 >Emitted(36, 14) Source(42, 2) + SourceIndex(0)
3 >Emitted(36, 16) Source(32, 29) + SourceIndex(0)
4 >Emitted(36, 20) Source(32, 33) + SourceIndex(0)
5 >Emitted(36, 23) Source(32, 29) + SourceIndex(0)
6 >Emitted(36, 35) Source(32, 33) + SourceIndex(0)
7 >Emitted(36, 40) Source(32, 29) + SourceIndex(0)
8 >Emitted(36, 52) Source(32, 33) + SourceIndex(0)
9 >Emitted(36, 60) Source(42, 2) + SourceIndex(0)
---
>>>        })(Thing = Actions.Thing || (Actions.Thing = {}));
1 >^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^
5 >                ^^^
6 >                   ^^^^^^^^^^^^^
7 >                                ^^^^^
8 >                                     ^^^^^^^^^^^^^
9 >                                                  ^^^^^^^^
10>                                                          ^->
1 >
2 >        }
3 >         
4 >           Thing
5 >                
6 >                   Thing
7 >                                
8 >                                     Thing
9 >                                                  .Find {
  >                                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                                  		
  >                                                  		public getId() { return "yo"; }
  >                                                  		
  >                                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                  
  >                                                  			return true;
  >                                                  		}
  >                                                  	}
  >                                                  }
1 >Emitted(37, 9) Source(42, 1) + SourceIndex(0)
2 >Emitted(37, 10) Source(42, 2) + SourceIndex(0)
3 >Emitted(37, 12) Source(32, 23) + SourceIndex(0)
4 >Emitted(37, 17) Source(32, 28) + SourceIndex(0)
5 >Emitted(37, 20) Source(32, 23) + SourceIndex(0)
6 >Emitted(37, 33) Source(32, 28) + SourceIndex(0)
7 >Emitted(37, 38) Source(32, 23) + SourceIndex(0)
8 >Emitted(37, 51) Source(32, 28) + SourceIndex(0)
9 >Emitted(37, 59) Source(42, 2) + SourceIndex(0)
---
>>>    })(Actions = Sample.Actions || (Sample.Actions = {}));
1->^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^^^
5 >              ^^^
6 >                 ^^^^^^^^^^^^^^
7 >                               ^^^^^
8 >                                    ^^^^^^^^^^^^^^
9 >                                                  ^^^^^^^^
1->
2 >    }
3 >     
4 >       Actions
5 >              
6 >                 Actions
7 >                               
8 >                                    Actions
9 >                                                  .Thing.Find {
  >                                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                                  		
  >                                                  		public getId() { return "yo"; }
  >                                                  		
  >                                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                  
  >                                                  			return true;
  >                                                  		}
  >                                                  	}
  >                                                  }
1->Emitted(38, 5) Source(42, 1) + SourceIndex(0)
2 >Emitted(38, 6) Source(42, 2) + SourceIndex(0)
3 >Emitted(38, 8) Source(32, 15) + SourceIndex(0)
4 >Emitted(38, 15) Source(32, 22) + SourceIndex(0)
5 >Emitted(38, 18) Source(32, 15) + SourceIndex(0)
6 >Emitted(38, 32) Source(32, 22) + SourceIndex(0)
7 >Emitted(38, 37) Source(32, 15) + SourceIndex(0)
8 >Emitted(38, 51) Source(32, 22) + SourceIndex(0)
9 >Emitted(38, 59) Source(42, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Actions.Thing.Find {
  >                    	export class StartFindAction implements Sample.Thing.IAction {
  >                    		
  >                    		public getId() { return "yo"; }
  >                    		
  >                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                    
  >                    			return true;
  >                    		}
  >                    	}
  >                    }
1 >Emitted(39, 1) Source(42, 1) + SourceIndex(0)
2 >Emitted(39, 2) Source(42, 2) + SourceIndex(0)
3 >Emitted(39, 4) Source(32, 8) + SourceIndex(0)
4 >Emitted(39, 10) Source(32, 14) + SourceIndex(0)
5 >Emitted(39, 15) Source(32, 8) + SourceIndex(0)
6 >Emitted(39, 21) Source(32, 14) + SourceIndex(0)
7 >Emitted(39, 29) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {var Thing;
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^^
5 >                    ^^^^
6 >                        ^^^^^
7 >                             ^
8 >                              ^^^^^^->
1->
  >
  >
2 >module 
3 >           Sample
4 >                 .
5 >                    
6 >                        Thing
7 >                             .Widgets {
  >                             	export class FindWidget implements Sample.Thing.IWidget {
  >                             
  >                             		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                             			
  >                             		private domNode:any = null;
  >                             		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                             		    // scenario 1
  >                             		    codeThing.addWidget("addWidget", this);
  >                             		}
  >                             		
  >                             		public getDomNode() {
  >                             			return domNode;
  >                             		}
  >                             		
  >                             		public destroy() {
  >                             
  >                             		}
  >                             
  >                             	}
  >                             }
1->Emitted(40, 1) Source(44, 1) + SourceIndex(0)
2 >Emitted(40, 12) Source(44, 8) + SourceIndex(0)
3 >Emitted(40, 18) Source(44, 14) + SourceIndex(0)
4 >Emitted(40, 21) Source(44, 15) + SourceIndex(0)
5 >Emitted(40, 25) Source(44, 15) + SourceIndex(0)
6 >Emitted(40, 30) Source(44, 20) + SourceIndex(0)
7 >Emitted(40, 31) Source(64, 2) + SourceIndex(0)
---
>>>    (function (Thing) {var Widgets;
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^^
5 >                       ^^^^
6 >                           ^^^^^^^
7 >                                  ^
1->
2 >    
3 >               Thing
4 >                    .
5 >                       
6 >                           Widgets
7 >                                   {
  >                                  	export class FindWidget implements Sample.Thing.IWidget {
  >                                  
  >                                  		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                  			
  >                                  		private domNode:any = null;
  >                                  		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                  		    // scenario 1
  >                                  		    codeThing.addWidget("addWidget", this);
  >                                  		}
  >                                  		
  >                                  		public getDomNode() {
  >                                  			return domNode;
  >                                  		}
  >                                  		
  >                                  		public destroy() {
  >                                  
  >                                  		}
  >                                  
  >                                  	}
  >                                  }
1->Emitted(41, 5) Source(44, 15) + SourceIndex(0)
2 >Emitted(41, 16) Source(44, 15) + SourceIndex(0)
3 >Emitted(41, 21) Source(44, 20) + SourceIndex(0)
4 >Emitted(41, 24) Source(44, 21) + SourceIndex(0)
5 >Emitted(41, 28) Source(44, 21) + SourceIndex(0)
6 >Emitted(41, 35) Source(44, 28) + SourceIndex(0)
7 >Emitted(41, 36) Source(64, 2) + SourceIndex(0)
---
>>>        (function (Widgets) {
1 >^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
4 >                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >        
3 >                   Widgets
1 >Emitted(42, 9) Source(44, 21) + SourceIndex(0)
2 >Emitted(42, 20) Source(44, 21) + SourceIndex(0)
3 >Emitted(42, 27) Source(44, 28) + SourceIndex(0)
---
>>>            var FindWidget = /** @class */ (function () {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1-> {
  >	
1->Emitted(43, 13) Source(45, 2) + SourceIndex(0)
---
>>>                function FindWidget(codeThing) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^
3 >                                    ^^^^^^^^^
4 >                                             ^^^->
1->export class FindWidget implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		
2 >                constructor(private 
3 >                                    codeThing: Sample.Thing.ICodeThing
1->Emitted(44, 17) Source(50, 3) + SourceIndex(0)
2 >Emitted(44, 37) Source(50, 23) + SourceIndex(0)
3 >Emitted(44, 46) Source(50, 57) + SourceIndex(0)
---
>>>                    this.codeThing = codeThing;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^
3 >                                  ^^^
4 >                                     ^^^^^^^^^
5 >                                              ^
1->
2 >                    codeThing
3 >                                  
4 >                                     codeThing
5 >                                              : Sample.Thing.ICodeThing
1->Emitted(45, 21) Source(50, 23) + SourceIndex(0)
2 >Emitted(45, 35) Source(50, 32) + SourceIndex(0)
3 >Emitted(45, 38) Source(50, 23) + SourceIndex(0)
4 >Emitted(45, 47) Source(50, 32) + SourceIndex(0)
5 >Emitted(45, 48) Source(50, 57) + SourceIndex(0)
---
>>>                    this.domNode = null;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
3 >                                ^^^
4 >                                   ^^^^
5 >                                       ^
1 >
2 >                    domNode
3 >                                :any = 
4 >                                   null
5 >                                       ;
1 >Emitted(46, 21) Source(49, 11) + SourceIndex(0)
2 >Emitted(46, 33) Source(49, 18) + SourceIndex(0)
3 >Emitted(46, 36) Source(49, 25) + SourceIndex(0)
4 >Emitted(46, 40) Source(49, 29) + SourceIndex(0)
5 >Emitted(46, 41) Source(49, 30) + SourceIndex(0)
---
>>>                    // scenario 1
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    
2 >                    // scenario 1
1 >Emitted(47, 21) Source(51, 7) + SourceIndex(0)
2 >Emitted(47, 34) Source(51, 20) + SourceIndex(0)
---
>>>                    codeThing.addWidget("addWidget", this);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^
4 >                              ^^^^^^^^^
5 >                                       ^
6 >                                        ^^^^^^^^^^^
7 >                                                   ^^
8 >                                                     ^^^^
9 >                                                         ^
10>                                                          ^
11>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
  >		    
2 >                    codeThing
3 >                             .
4 >                              addWidget
5 >                                       (
6 >                                        "addWidget"
7 >                                                   , 
8 >                                                     this
9 >                                                         )
10>                                                          ;
1->Emitted(48, 21) Source(52, 7) + SourceIndex(0)
2 >Emitted(48, 30) Source(52, 16) + SourceIndex(0)
3 >Emitted(48, 31) Source(52, 17) + SourceIndex(0)
4 >Emitted(48, 40) Source(52, 26) + SourceIndex(0)
5 >Emitted(48, 41) Source(52, 27) + SourceIndex(0)
6 >Emitted(48, 52) Source(52, 38) + SourceIndex(0)
7 >Emitted(48, 54) Source(52, 40) + SourceIndex(0)
8 >Emitted(48, 58) Source(52, 44) + SourceIndex(0)
9 >Emitted(48, 59) Source(52, 45) + SourceIndex(0)
10>Emitted(48, 60) Source(52, 46) + SourceIndex(0)
---
>>>                }FindWidget.prototype.gar = function (runner) { if (true) {return runner(this);} };
1->^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^^^^^^^^^^^^^^^^^^^^^
5 >                                         ^^^
6 >                                            ^^^^^^^^^^
7 >                                                      ^^^^^^
8 >                                                            ^^^^
9 >                                                                ^^^^
10>                                                                    ^^^^
11>                                                                        ^^
12>                                                                          ^
13>                                                                           ^^^^^^^
14>                                                                                  ^^^^^^
15>                                                                                        ^
16>                                                                                         ^^^^
17>                                                                                             ^
18>                                                                                              ^
19>                                                                                               ^
20>                                                                                                ^
21>                                                                                                 ^
1->
  >		
2 >                }
3 >                 
4 >                 gar
5 >                                         
6 >                                            public gar(
7 >                                                      runner:(widget:Sample.Thing.IWidget)=>any
8 >                                                            ) { 
9 >                                                                if (
10>                                                                    true
11>                                                                        ) 
12>                                                                          {
13>                                                                           return 
14>                                                                                  runner
15>                                                                                        (
16>                                                                                         this
17>                                                                                             )
18>                                                                                              ;
19>                                                                                               }
20>                                                                                                
21>                                                                                                 }
1->Emitted(49, 17) Source(53, 3) + SourceIndex(0)
2 >Emitted(49, 18) Source(53, 4) + SourceIndex(0)
3 >Emitted(49, 18) Source(47, 10) + SourceIndex(0)
4 >Emitted(49, 42) Source(47, 13) + SourceIndex(0)
5 >Emitted(49, 45) Source(47, 3) + SourceIndex(0)
6 >Emitted(49, 55) Source(47, 14) + SourceIndex(0)
7 >Emitted(49, 61) Source(47, 55) + SourceIndex(0)
8 >Emitted(49, 65) Source(47, 59) + SourceIndex(0)
9 >Emitted(49, 69) Source(47, 63) + SourceIndex(0)
10>Emitted(49, 73) Source(47, 67) + SourceIndex(0)
11>Emitted(49, 75) Source(47, 69) + SourceIndex(0)
12>Emitted(49, 76) Source(47, 70) + SourceIndex(0)
13>Emitted(49, 83) Source(47, 77) + SourceIndex(0)
14>Emitted(49, 89) Source(47, 83) + SourceIndex(0)
15>Emitted(49, 90) Source(47, 84) + SourceIndex(0)
16>Emitted(49, 94) Source(47, 88) + SourceIndex(0)
17>Emitted(49, 95) Source(47, 89) + SourceIndex(0)
18>Emitted(49, 96) Source(47, 90) + SourceIndex(0)
19>Emitted(49, 97) Source(47, 91) + SourceIndex(0)
20>Emitted(49, 98) Source(47, 91) + SourceIndex(0)
21>Emitted(49, 99) Source(47, 92) + SourceIndex(0)
---
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>                FindWidget.prototype.getDomNode = function () {
1 >^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                               ^^^
1 >
  >			
  >		private domNode:any = null;
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    codeThing.addWidget("addWidget", this);
  >		}
  >		
  >		public 
2 >                getDomNode
3 >                                               
1 >Emitted(57, 17) Source(55, 10) + SourceIndex(0)
2 >Emitted(57, 48) Source(55, 20) + SourceIndex(0)
3 >Emitted(57, 51) Source(55, 3) + SourceIndex(0)
---
>>>                    return domNode;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^
3 >                           ^^^^^^^
4 >                                  ^
1 >public getDomNode() {
  >			
2 >                    return 
3 >                           domNode
4 >                                  ;
1 >Emitted(58, 21) Source(56, 4) + SourceIndex(0)
2 >Emitted(58, 28) Source(56, 11) + SourceIndex(0)
3 >Emitted(58, 35) Source(56, 18) + SourceIndex(0)
4 >Emitted(58, 36) Source(56, 19) + SourceIndex(0)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
1 >
  >		
2 >                }
1 >Emitted(59, 17) Source(57, 3) + SourceIndex(0)
2 >Emitted(59, 18) Source(57, 4) + SourceIndex(0)
---
>>>
>>>                FindWidget.prototype.destroy = function () {
1 >^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                            ^^^
1 >
  >		
  >		public 
2 >                destroy
3 >                                            
1 >Emitted(61, 17) Source(59, 10) + SourceIndex(0)
2 >Emitted(61, 45) Source(59, 17) + SourceIndex(0)
3 >Emitted(61, 48) Source(59, 3) + SourceIndex(0)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^->
1 >public destroy() {
  >
  >		
2 >                }
1 >Emitted(62, 17) Source(61, 3) + SourceIndex(0)
2 >Emitted(62, 18) Source(61, 4) + SourceIndex(0)
---
>>>                return FindWidget;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^
1->
  >
  >	
2 >                }
1->Emitted(63, 17) Source(63, 2) + SourceIndex(0)
2 >Emitted(63, 34) Source(63, 3) + SourceIndex(0)
---
>>>            }());
1 >^^^^^^^^^^^^
2 >            ^
3 >             
4 >             ^^^^
5 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >            }
3 >             
4 >             export class FindWidget implements Sample.Thing.IWidget {
  >             
  >             		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >             			
  >             		private domNode:any = null;
  >             		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >             		    // scenario 1
  >             		    codeThing.addWidget("addWidget", this);
  >             		}
  >             		
  >             		public getDomNode() {
  >             			return domNode;
  >             		}
  >             		
  >             		public destroy() {
  >             
  >             		}
  >             
  >             	}
1 >Emitted(64, 13) Source(63, 2) + SourceIndex(0)
2 >Emitted(64, 14) Source(63, 3) + SourceIndex(0)
3 >Emitted(64, 14) Source(45, 2) + SourceIndex(0)
4 >Emitted(64, 18) Source(63, 3) + SourceIndex(0)
---
>>>            Widgets.FindWidget = FindWidget;
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^^^^^^^^
3 >                              ^^^^^^^^^^^^^
4 >                                           ^
5 >                                            ^^^^^^^^^^^^^^^^^->
1->
2 >            FindWidget
3 >                               implements Sample.Thing.IWidget {
  >                              
  >                              		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                              			
  >                              		private domNode:any = null;
  >                              		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                              		    // scenario 1
  >                              		    codeThing.addWidget("addWidget", this);
  >                              		}
  >                              		
  >                              		public getDomNode() {
  >                              			return domNode;
  >                              		}
  >                              		
  >                              		public destroy() {
  >                              
  >                              		}
  >                              
  >                              	}
4 >                                           
1->Emitted(65, 13) Source(45, 15) + SourceIndex(0)
2 >Emitted(65, 31) Source(45, 25) + SourceIndex(0)
3 >Emitted(65, 44) Source(63, 3) + SourceIndex(0)
4 >Emitted(65, 45) Source(63, 3) + SourceIndex(0)
---
>>>        })(Widgets = Thing.Widgets || (Thing.Widgets = {}));
1->^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^
5 >                  ^^^
6 >                     ^^^^^^^^^^^^^
7 >                                  ^^^^^
8 >                                       ^^^^^^^^^^^^^
9 >                                                    ^^^^^^^^
1->
  >
2 >        }
3 >         
4 >           Widgets
5 >                  
6 >                     Widgets
7 >                                  
8 >                                       Widgets
9 >                                                     {
  >                                                    	export class FindWidget implements Sample.Thing.IWidget {
  >                                                    
  >                                                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                                    			
  >                                                    		private domNode:any = null;
  >                                                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                                    		    // scenario 1
  >                                                    		    codeThing.addWidget("addWidget", this);
  >                                                    		}
  >                                                    		
  >                                                    		public getDomNode() {
  >                                                    			return domNode;
  >                                                    		}
  >                                                    		
  >                                                    		public destroy() {
  >                                                    
  >                                                    		}
  >                                                    
  >                                                    	}
  >                                                    }
1->Emitted(66, 9) Source(64, 1) + SourceIndex(0)
2 >Emitted(66, 10) Source(64, 2) + SourceIndex(0)
3 >Emitted(66, 12) Source(44, 21) + SourceIndex(0)
4 >Emitted(66, 19) Source(44, 28) + SourceIndex(0)
5 >Emitted(66, 22) Source(44, 21) + SourceIndex(0)
6 >Emitted(66, 35) Source(44, 28) + SourceIndex(0)
7 >Emitted(66, 40) Source(44, 21) + SourceIndex(0)
8 >Emitted(66, 53) Source(44, 28) + SourceIndex(0)
9 >Emitted(66, 61) Source(64, 2) + SourceIndex(0)
---
>>>    })(Thing = Sample.Thing || (Sample.Thing = {}));
1 >^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^
5 >            ^^^
6 >               ^^^^^^^^^^^^
7 >                           ^^^^^
8 >                                ^^^^^^^^^^^^
9 >                                            ^^^^^^^^
1 >
2 >    }
3 >     
4 >       Thing
5 >            
6 >               Thing
7 >                           
8 >                                Thing
9 >                                            .Widgets {
  >                                            	export class FindWidget implements Sample.Thing.IWidget {
  >                                            
  >                                            		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                            			
  >                                            		private domNode:any = null;
  >                                            		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                            		    // scenario 1
  >                                            		    codeThing.addWidget("addWidget", this);
  >                                            		}
  >                                            		
  >                                            		public getDomNode() {
  >                                            			return domNode;
  >                                            		}
  >                                            		
  >                                            		public destroy() {
  >                                            
  >                                            		}
  >                                            
  >                                            	}
  >                                            }
1 >Emitted(67, 5) Source(64, 1) + SourceIndex(0)
2 >Emitted(67, 6) Source(64, 2) + SourceIndex(0)
3 >Emitted(67, 8) Source(44, 15) + SourceIndex(0)
4 >Emitted(67, 13) Source(44, 20) + SourceIndex(0)
5 >Emitted(67, 16) Source(44, 15) + SourceIndex(0)
6 >Emitted(67, 28) Source(44, 20) + SourceIndex(0)
7 >Emitted(67, 33) Source(44, 15) + SourceIndex(0)
8 >Emitted(67, 45) Source(44, 20) + SourceIndex(0)
9 >Emitted(67, 53) Source(64, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Thing.Widgets {
  >                    	export class FindWidget implements Sample.Thing.IWidget {
  >                    
  >                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                    			
  >                    		private domNode:any = null;
  >                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                    		    // scenario 1
  >                    		    codeThing.addWidget("addWidget", this);
  >                    		}
  >                    		
  >                    		public getDomNode() {
  >                    			return domNode;
  >                    		}
  >                    		
  >                    		public destroy() {
  >                    
  >                    		}
  >                    
  >                    	}
  >                    }
1 >Emitted(68, 1) Source(64, 1) + SourceIndex(0)
2 >Emitted(68, 2) Source(64, 2) + SourceIndex(0)
3 >Emitted(68, 4) Source(44, 8) + SourceIndex(0)
4 >Emitted(68, 10) Source(44, 14) + SourceIndex(0)
5 >Emitted(68, 15) Source(44, 8) + SourceIndex(0)
6 >Emitted(68, 21) Source(44, 14) + SourceIndex(0)
7 >Emitted(68, 29) Source(64, 2) + SourceIndex(0)
---
>>>var AbstractMode = /** @class */ (function () {
1->
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
  >
  >interface IMode { getInitialState(): IState;} 
  >
1->Emitted(69, 1) Source(67, 1) + SourceIndex(0)
---
>>>    function AbstractMode() {}
1->^^^^
2 >    ^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                             ^
4 >                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >    class AbstractMode implements IMode { public getInitialState(): IState { return null;} 
3 >                             }
1->Emitted(70, 5) Source(67, 1) + SourceIndex(0)
2 >Emitted(70, 30) Source(67, 88) + SourceIndex(0)
3 >Emitted(70, 31) Source(67, 89) + SourceIndex(0)
---
>>>    AbstractMode.prototype.getInitialState = function () { return null; };
1->^^^^
2 >    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                          ^^^
4 >                                             ^^^^^^^^^^^^^^
5 >                                                           ^^^^^^^
6 >                                                                  ^^^^
7 >                                                                      ^
8 >                                                                       ^
9 >                                                                        ^
1->
2 >    getInitialState
3 >                                          
4 >                                             public getInitialState(): IState { 
5 >                                                           return 
6 >                                                                  null
7 >                                                                      ;
8 >                                                                       
9 >                                                                        }
1->Emitted(71, 5) Source(67, 46) + SourceIndex(0)
2 >Emitted(71, 43) Source(67, 61) + SourceIndex(0)
3 >Emitted(71, 46) Source(67, 39) + SourceIndex(0)
4 >Emitted(71, 60) Source(67, 74) + SourceIndex(0)
5 >Emitted(71, 67) Source(67, 81) + SourceIndex(0)
6 >Emitted(71, 71) Source(67, 85) + SourceIndex(0)
7 >Emitted(71, 72) Source(67, 86) + SourceIndex(0)
8 >Emitted(71, 73) Source(67, 86) + SourceIndex(0)
9 >Emitted(71, 74) Source(67, 87) + SourceIndex(0)
---
>>>    return AbstractMode;
1 >^^^^
2 >    ^^^^^^^^^^^^^^^^^^^
1 > 
2 >    }
1 >Emitted(72, 5) Source(67, 88) + SourceIndex(0)
2 >Emitted(72, 24) Source(67, 89) + SourceIndex(0)
---
>>>}());
1 >
2 >^
3 > 
4 > ^^^^
5 >     ^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 > class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
1 >Emitted(73, 1) Source(67, 88) + SourceIndex(0)
2 >Emitted(73, 2) Source(67, 89) + SourceIndex(0)
3 >Emitted(73, 2) Source(67, 1) + SourceIndex(0)
4 >Emitted(73, 6) Source(67, 89) + SourceIndex(0)
---
>>>(function (Sample) {var Thing;
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^^
5 >                    ^^^^
6 >                        ^^^^^
7 >                             ^
8 >                              ^^^^^^^^->
1->
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >
2 >module 
3 >           Sample
4 >                 .
5 >                    
6 >                        Thing
7 >                             .Languages.PlainText {
  >                             	
  >                             	export class State implements IState {		
  >                                     constructor(private mode: IMode) { }
  >                             		public clone():IState {
  >                             			return this;
  >                             		}
  >                             
  >                             		public equals(other:IState):boolean {
  >                             			return this === other;
  >                             		}
  >                             		
  >                             		public getMode(): IMode { return mode; }
  >                             	}
  >                             	
  >                             	export class Mode extends AbstractMode {
  >                             
  >                             		// scenario 2
  >                             		public getInitialState(): IState {
  >                             			return new State(self);
  >                             		}
  >                             
  >                             
  >                             	}
  >                             }
1->Emitted(74, 1) Source(76, 1) + SourceIndex(0)
2 >Emitted(74, 12) Source(76, 8) + SourceIndex(0)
3 >Emitted(74, 18) Source(76, 14) + SourceIndex(0)
4 >Emitted(74, 21) Source(76, 15) + SourceIndex(0)
5 >Emitted(74, 25) Source(76, 15) + SourceIndex(0)
6 >Emitted(74, 30) Source(76, 20) + SourceIndex(0)
7 >Emitted(74, 31) Source(100, 2) + SourceIndex(0)
---
>>>    (function (Thing) {var Languages;
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^^
5 >                       ^^^^
6 >                           ^^^^^^^^^
7 >                                    ^
8 >                                     ^^^^^^^^^->
1->
2 >    
3 >               Thing
4 >                    .
5 >                       
6 >                           Languages
7 >                                    .PlainText {
  >                                    	
  >                                    	export class State implements IState {		
  >                                            constructor(private mode: IMode) { }
  >                                    		public clone():IState {
  >                                    			return this;
  >                                    		}
  >                                    
  >                                    		public equals(other:IState):boolean {
  >                                    			return this === other;
  >                                    		}
  >                                    		
  >                                    		public getMode(): IMode { return mode; }
  >                                    	}
  >                                    	
  >                                    	export class Mode extends AbstractMode {
  >                                    
  >                                    		// scenario 2
  >                                    		public getInitialState(): IState {
  >                                    			return new State(self);
  >                                    		}
  >                                    
  >                                    
  >                                    	}
  >                                    }
1->Emitted(75, 5) Source(76, 15) + SourceIndex(0)
2 >Emitted(75, 16) Source(76, 15) + SourceIndex(0)
3 >Emitted(75, 21) Source(76, 20) + SourceIndex(0)
4 >Emitted(75, 24) Source(76, 21) + SourceIndex(0)
5 >Emitted(75, 28) Source(76, 21) + SourceIndex(0)
6 >Emitted(75, 37) Source(76, 30) + SourceIndex(0)
7 >Emitted(75, 38) Source(100, 2) + SourceIndex(0)
---
>>>        (function (Languages) {var PlainText;
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^^^
4 >                            ^^^
5 >                               ^^^^
6 >                                   ^^^^^^^^^
7 >                                            ^
1->
2 >        
3 >                   Languages
4 >                            .
5 >                               
6 >                                   PlainText
7 >                                             {
  >                                            	
  >                                            	export class State implements IState {		
  >                                                    constructor(private mode: IMode) { }
  >                                            		public clone():IState {
  >                                            			return this;
  >                                            		}
  >                                            
  >                                            		public equals(other:IState):boolean {
  >                                            			return this === other;
  >                                            		}
  >                                            		
  >                                            		public getMode(): IMode { return mode; }
  >                                            	}
  >                                            	
  >                                            	export class Mode extends AbstractMode {
  >                                            
  >                                            		// scenario 2
  >                                            		public getInitialState(): IState {
  >                                            			return new State(self);
  >                                            		}
  >                                            
  >                                            
  >                                            	}
  >                                            }
1->Emitted(76, 9) Source(76, 21) + SourceIndex(0)
2 >Emitted(76, 20) Source(76, 21) + SourceIndex(0)
3 >Emitted(76, 29) Source(76, 30) + SourceIndex(0)
4 >Emitted(76, 32) Source(76, 31) + SourceIndex(0)
5 >Emitted(76, 36) Source(76, 31) + SourceIndex(0)
6 >Emitted(76, 45) Source(76, 40) + SourceIndex(0)
7 >Emitted(76, 46) Source(100, 2) + SourceIndex(0)
---
>>>            (function (PlainText) {
1 >^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^^^^^^
1 >
2 >            
3 >                       PlainText
1 >Emitted(77, 13) Source(76, 31) + SourceIndex(0)
2 >Emitted(77, 24) Source(76, 31) + SourceIndex(0)
3 >Emitted(77, 33) Source(76, 40) + SourceIndex(0)
---
>>>
>>>                var State = /** @class */ (function () {
1 >^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 > {
  >	
  >	
1 >Emitted(79, 17) Source(78, 2) + SourceIndex(0)
---
>>>                    function State(mode) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^
3 >                                   ^^^^
4 >                                       ^^^->
1->export class State implements IState {		
  >        
2 >                    constructor(private 
3 >                                   mode: IMode
1->Emitted(80, 21) Source(79, 9) + SourceIndex(0)
2 >Emitted(80, 36) Source(79, 29) + SourceIndex(0)
3 >Emitted(80, 40) Source(79, 40) + SourceIndex(0)
---
>>>                        this.mode = mode;
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^^^
3 >                                 ^^^
4 >                                    ^^^^
5 >                                        ^
1->
2 >                        mode
3 >                                 
4 >                                    mode
5 >                                        : IMode
1->Emitted(81, 25) Source(79, 29) + SourceIndex(0)
2 >Emitted(81, 34) Source(79, 33) + SourceIndex(0)
3 >Emitted(81, 37) Source(79, 29) + SourceIndex(0)
4 >Emitted(81, 41) Source(79, 33) + SourceIndex(0)
5 >Emitted(81, 42) Source(79, 40) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >) { 
2 >                    }
1 >Emitted(82, 21) Source(79, 44) + SourceIndex(0)
2 >Emitted(82, 22) Source(79, 45) + SourceIndex(0)
---
>>>                    State.prototype.clone = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^
3 >                                         ^^^
1->
  >		public 
2 >                    clone
3 >                                         
1->Emitted(83, 21) Source(80, 10) + SourceIndex(0)
2 >Emitted(83, 42) Source(80, 15) + SourceIndex(0)
3 >Emitted(83, 45) Source(80, 3) + SourceIndex(0)
---
>>>                        return this;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^
1 >public clone():IState {
  >			
2 >                        return 
3 >                               this
4 >                                   ;
1 >Emitted(84, 25) Source(81, 4) + SourceIndex(0)
2 >Emitted(84, 32) Source(81, 11) + SourceIndex(0)
3 >Emitted(84, 36) Source(81, 15) + SourceIndex(0)
4 >Emitted(84, 37) Source(81, 16) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
1 >
  >		
2 >                    }
1 >Emitted(85, 21) Source(82, 3) + SourceIndex(0)
2 >Emitted(85, 22) Source(82, 4) + SourceIndex(0)
---
>>>
>>>                    State.prototype.equals = function (other) {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^
3 >                                          ^^^
4 >                                             ^^^^^^^^^^
5 >                                                       ^^^^^
1 >
  >
  >		public 
2 >                    equals
3 >                                          
4 >                                             public equals(
5 >                                                       other:IState
1 >Emitted(87, 21) Source(84, 10) + SourceIndex(0)
2 >Emitted(87, 43) Source(84, 16) + SourceIndex(0)
3 >Emitted(87, 46) Source(84, 3) + SourceIndex(0)
4 >Emitted(87, 56) Source(84, 17) + SourceIndex(0)
5 >Emitted(87, 61) Source(84, 29) + SourceIndex(0)
---
>>>                        return this === other;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^^^^^
5 >                                        ^^^^^
6 >                                             ^
1 >):boolean {
  >			
2 >                        return 
3 >                               this
4 >                                    === 
5 >                                        other
6 >                                             ;
1 >Emitted(88, 25) Source(85, 4) + SourceIndex(0)
2 >Emitted(88, 32) Source(85, 11) + SourceIndex(0)
3 >Emitted(88, 36) Source(85, 15) + SourceIndex(0)
4 >Emitted(88, 41) Source(85, 20) + SourceIndex(0)
5 >Emitted(88, 46) Source(85, 25) + SourceIndex(0)
6 >Emitted(88, 47) Source(85, 26) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
1 >
  >		
2 >                    }
1 >Emitted(89, 21) Source(86, 3) + SourceIndex(0)
2 >Emitted(89, 22) Source(86, 4) + SourceIndex(0)
---
>>>
>>>                    State.prototype.getMode = function () { return mode; };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^
3 >                                           ^^^
4 >                                              ^^^^^^^^^^^^^^
5 >                                                            ^^^^^^^
6 >                                                                   ^^^^
7 >                                                                       ^
8 >                                                                        ^
9 >                                                                         ^
1 >
  >		
  >		public 
2 >                    getMode
3 >                                           
4 >                                              public getMode(): IMode { 
5 >                                                            return 
6 >                                                                   mode
7 >                                                                       ;
8 >                                                                         
9 >                                                                         }
1 >Emitted(91, 21) Source(88, 10) + SourceIndex(0)
2 >Emitted(91, 44) Source(88, 17) + SourceIndex(0)
3 >Emitted(91, 47) Source(88, 3) + SourceIndex(0)
4 >Emitted(91, 61) Source(88, 29) + SourceIndex(0)
5 >Emitted(91, 68) Source(88, 36) + SourceIndex(0)
6 >Emitted(91, 72) Source(88, 40) + SourceIndex(0)
7 >Emitted(91, 73) Source(88, 41) + SourceIndex(0)
8 >Emitted(91, 74) Source(88, 42) + SourceIndex(0)
9 >Emitted(91, 75) Source(88, 43) + SourceIndex(0)
---
>>>                    return State;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
1 >
  >	
2 >                    }
1 >Emitted(92, 21) Source(89, 2) + SourceIndex(0)
2 >Emitted(92, 33) Source(89, 3) + SourceIndex(0)
---
>>>                }());
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^
5 >                     ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                 export class State implements IState {		
  >                         constructor(private mode: IMode) { }
  >                 		public clone():IState {
  >                 			return this;
  >                 		}
  >                 
  >                 		public equals(other:IState):boolean {
  >                 			return this === other;
  >                 		}
  >                 		
  >                 		public getMode(): IMode { return mode; }
  >                 	}
1 >Emitted(93, 17) Source(89, 2) + SourceIndex(0)
2 >Emitted(93, 18) Source(89, 3) + SourceIndex(0)
3 >Emitted(93, 18) Source(78, 2) + SourceIndex(0)
4 >Emitted(93, 22) Source(89, 3) + SourceIndex(0)
---
>>>                PlainText.State = State;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^
3 >                               ^^^^^^^^
4 >                                       ^
5 >                                        ^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                State
3 >                                implements IState {		
  >                                       constructor(private mode: IMode) { }
  >                               		public clone():IState {
  >                               			return this;
  >                               		}
  >                               
  >                               		public equals(other:IState):boolean {
  >                               			return this === other;
  >                               		}
  >                               		
  >                               		public getMode(): IMode { return mode; }
  >                               	}
4 >                                       
1->Emitted(94, 17) Source(78, 15) + SourceIndex(0)
2 >Emitted(94, 32) Source(78, 20) + SourceIndex(0)
3 >Emitted(94, 40) Source(89, 3) + SourceIndex(0)
4 >Emitted(94, 41) Source(89, 3) + SourceIndex(0)
---
>>>                var Mode = /** @class */ (function (_super) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
  >	
  >	
1->Emitted(95, 17) Source(91, 2) + SourceIndex(0)
---
>>>                    __extends(Mode, _super);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^
1->export class Mode extends 
2 >                    AbstractMode
1->Emitted(96, 21) Source(91, 28) + SourceIndex(0)
2 >Emitted(96, 45) Source(91, 40) + SourceIndex(0)
---
>>>                    function Mode() {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
1 >Emitted(97, 21) Source(91, 2) + SourceIndex(0)
---
>>>                        return _super !== null && _super.apply(this, arguments) || this;
>>>                    }
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^->
1->export class Mode extends AbstractMode {
  >
  >		// scenario 2
  >		public getInitialState(): IState {
  >			return new State(self);
  >		}
  >
  >
  >	
2 >                    }
1->Emitted(99, 21) Source(99, 2) + SourceIndex(0)
2 >Emitted(99, 22) Source(99, 3) + SourceIndex(0)
---
>>>                    // scenario 2
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                    // scenario 2
1->Emitted(100, 21) Source(93, 3) + SourceIndex(0)
2 >Emitted(100, 34) Source(93, 16) + SourceIndex(0)
---
>>>                    Mode.prototype.getInitialState = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                  ^^^
1->
  >		public 
2 >                    getInitialState
3 >                                                  
1->Emitted(101, 21) Source(94, 10) + SourceIndex(0)
2 >Emitted(101, 51) Source(94, 25) + SourceIndex(0)
3 >Emitted(101, 54) Source(94, 3) + SourceIndex(0)
---
>>>                        return new State(self);
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^^^^^
5 >                                        ^
6 >                                         ^^^^
7 >                                             ^
8 >                                              ^
1 >public getInitialState(): IState {
  >			
2 >                        return 
3 >                               new 
4 >                                   State
5 >                                        (
6 >                                         self
7 >                                             )
8 >                                              ;
1 >Emitted(102, 25) Source(95, 4) + SourceIndex(0)
2 >Emitted(102, 32) Source(95, 11) + SourceIndex(0)
3 >Emitted(102, 36) Source(95, 15) + SourceIndex(0)
4 >Emitted(102, 41) Source(95, 20) + SourceIndex(0)
5 >Emitted(102, 42) Source(95, 21) + SourceIndex(0)
6 >Emitted(102, 46) Source(95, 25) + SourceIndex(0)
7 >Emitted(102, 47) Source(95, 26) + SourceIndex(0)
8 >Emitted(102, 48) Source(95, 27) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(103, 21) Source(96, 3) + SourceIndex(0)
2 >Emitted(103, 22) Source(96, 4) + SourceIndex(0)
---
>>>                    return Mode;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^
3 >                               ^^^->
1->
  >
  >
  >	
2 >                    }
1->Emitted(104, 21) Source(99, 2) + SourceIndex(0)
2 >Emitted(104, 32) Source(99, 3) + SourceIndex(0)
---
>>>                }(AbstractMode));
1->^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^
5 >                  ^^^^^^^^^^^^
6 >                              ^^^
7 >                                 ^^^^^^->
1->
2 >                }
3 >                 
4 >                 export class Mode extends 
5 >                  AbstractMode
6 >                               {
  >                              
  >                              		// scenario 2
  >                              		public getInitialState(): IState {
  >                              			return new State(self);
  >                              		}
  >                              
  >                              
  >                              	}
1->Emitted(105, 17) Source(99, 2) + SourceIndex(0)
2 >Emitted(105, 18) Source(99, 3) + SourceIndex(0)
3 >Emitted(105, 18) Source(91, 2) + SourceIndex(0)
4 >Emitted(105, 19) Source(91, 28) + SourceIndex(0)
5 >Emitted(105, 31) Source(91, 40) + SourceIndex(0)
6 >Emitted(105, 34) Source(99, 3) + SourceIndex(0)
---
>>>                PlainText.Mode = Mode;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^
3 >                              ^^^^^^^
4 >                                     ^
5 >                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                Mode
3 >                               extends AbstractMode {
  >                              
  >                              		// scenario 2
  >                              		public getInitialState(): IState {
  >                              			return new State(self);
  >                              		}
  >                              
  >                              
  >                              	}
4 >                                     
1->Emitted(106, 17) Source(91, 15) + SourceIndex(0)
2 >Emitted(106, 31) Source(91, 19) + SourceIndex(0)
3 >Emitted(106, 38) Source(99, 3) + SourceIndex(0)
4 >Emitted(106, 39) Source(99, 3) + SourceIndex(0)
---
>>>            })(PlainText = Languages.PlainText || (Languages.PlainText = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^^^^^^
5 >                        ^^^
6 >                           ^^^^^^^^^^^^^^^^^^^
7 >                                              ^^^^^
8 >                                                   ^^^^^^^^^^^^^^^^^^^
9 >                                                                      ^^^^^^^^
1->
  >
2 >            }
3 >             
4 >               PlainText
5 >                        
6 >                           PlainText
7 >                                              
8 >                                                   PlainText
9 >                                                                       {
  >                                                                      	
  >                                                                      	export class State implements IState {		
  >                                                                              constructor(private mode: IMode) { }
  >                                                                      		public clone():IState {
  >                                                                      			return this;
  >                                                                      		}
  >                                                                      
  >                                                                      		public equals(other:IState):boolean {
  >                                                                      			return this === other;
  >                                                                      		}
  >                                                                      		
  >                                                                      		public getMode(): IMode { return mode; }
  >                                                                      	}
  >                                                                      	
  >                                                                      	export class Mode extends AbstractMode {
  >                                                                      
  >                                                                      		// scenario 2
  >                                                                      		public getInitialState(): IState {
  >                                                                      			return new State(self);
  >                                                                      		}
  >                                                                      
  >                                                                      
  >                                                                      	}
  >                                                                      }
1->Emitted(107, 13) Source(100, 1) + SourceIndex(0)
2 >Emitted(107, 14) Source(100, 2) + SourceIndex(0)
3 >Emitted(107, 16) Source(76, 31) + SourceIndex(0)
4 >Emitted(107, 25) Source(76, 40) + SourceIndex(0)
5 >Emitted(107, 28) Source(76, 31) + SourceIndex(0)
6 >Emitted(107, 47) Source(76, 40) + SourceIndex(0)
7 >Emitted(107, 52) Source(76, 31) + SourceIndex(0)
8 >Emitted(107, 71) Source(76, 40) + SourceIndex(0)
9 >Emitted(107, 79) Source(100, 2) + SourceIndex(0)
---
>>>        })(Languages = Thing.Languages || (Thing.Languages = {}));
1 >^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^^^
5 >                    ^^^
6 >                       ^^^^^^^^^^^^^^^
7 >                                      ^^^^^
8 >                                           ^^^^^^^^^^^^^^^
9 >                                                          ^^^^^^^^
1 >
2 >        }
3 >         
4 >           Languages
5 >                    
6 >                       Languages
7 >                                      
8 >                                           Languages
9 >                                                          .PlainText {
  >                                                          	
  >                                                          	export class State implements IState {		
  >                                                                  constructor(private mode: IMode) { }
  >                                                          		public clone():IState {
  >                                                          			return this;
  >                                                          		}
  >                                                          
  >                                                          		public equals(other:IState):boolean {
  >                                                          			return this === other;
  >                                                          		}
  >                                                          		
  >                                                          		public getMode(): IMode { return mode; }
  >                                                          	}
  >                                                          	
  >                                                          	export class Mode extends AbstractMode {
  >                                                          
  >                                                          		// scenario 2
  >                                                          		public getInitialState(): IState {
  >                                                          			return new State(self);
  >                                                          		}
  >                                                          
  >                                                          
  >                                                          	}
  >                                                          }
1 >Emitted(108, 9) Source(100, 1) + SourceIndex(0)
2 >Emitted(108, 10) Source(100, 2) + SourceIndex(0)
3 >Emitted(108, 12) Source(76, 21) + SourceIndex(0)
4 >Emitted(108, 21) Source(76, 30) + SourceIndex(0)
5 >Emitted(108, 24) Source(76, 21) + SourceIndex(0)
6 >Emitted(108, 39) Source(76, 30) + SourceIndex(0)
7 >Emitted(108, 44) Source(76, 21) + SourceIndex(0)
8 >Emitted(108, 59) Source(76, 30) + SourceIndex(0)
9 >Emitted(108, 67) Source(100, 2) + SourceIndex(0)
---
>>>    })(Thing = Sample.Thing || (Sample.Thing = {}));
1 >^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^
5 >            ^^^
6 >               ^^^^^^^^^^^^
7 >                           ^^^^^
8 >                                ^^^^^^^^^^^^
9 >                                            ^^^^^^^^
1 >
2 >    }
3 >     
4 >       Thing
5 >            
6 >               Thing
7 >                           
8 >                                Thing
9 >                                            .Languages.PlainText {
  >                                            	
  >                                            	export class State implements IState {		
  >                                                    constructor(private mode: IMode) { }
  >                                            		public clone():IState {
  >                                            			return this;
  >                                            		}
  >                                            
  >                                            		public equals(other:IState):boolean {
  >                                            			return this === other;
  >                                            		}
  >                                            		
  >                                            		public getMode(): IMode { return mode; }
  >                                            	}
  >                                            	
  >                                            	export class Mode extends AbstractMode {
  >                                            
  >                                            		// scenario 2
  >                                            		public getInitialState(): IState {
  >                                            			return new State(self);
  >                                            		}
  >                                            
  >                                            
  >                                            	}
  >                                            }
1 >Emitted(109, 5) Source(100, 1) + SourceIndex(0)
2 >Emitted(109, 6) Source(100, 2) + SourceIndex(0)
3 >Emitted(109, 8) Source(76, 15) + SourceIndex(0)
4 >Emitted(109, 13) Source(76, 20) + SourceIndex(0)
5 >Emitted(109, 16) Source(76, 15) + SourceIndex(0)
6 >Emitted(109, 28) Source(76, 20) + SourceIndex(0)
7 >Emitted(109, 33) Source(76, 15) + SourceIndex(0)
8 >Emitted(109, 45) Source(76, 20) + SourceIndex(0)
9 >Emitted(109, 53) Source(100, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Thing.Languages.PlainText {
  >                    	
  >                    	export class State implements IState {		
  >                            constructor(private mode: IMode) { }
  >                    		public clone():IState {
  >                    			return this;
  >                    		}
  >                    
  >                    		public equals(other:IState):boolean {
  >                    			return this === other;
  >                    		}
  >                    		
  >                    		public getMode(): IMode { return mode; }
  >                    	}
  >                    	
  >                    	export class Mode extends AbstractMode {
  >                    
  >                    		// scenario 2
  >                    		public getInitialState(): IState {
  >                    			return new State(self);
  >                    		}
  >                    
  >                    
  >                    	}
  >                    }
1 >Emitted(110, 1) Source(100, 1) + SourceIndex(0)
2 >Emitted(110, 2) Source(100, 2) + SourceIndex(0)
3 >Emitted(110, 4) Source(76, 8) + SourceIndex(0)
4 >Emitted(110, 10) Source(76, 14) + SourceIndex(0)
5 >Emitted(110, 15) Source(76, 8) + SourceIndex(0)
6 >Emitted(110, 21) Source(76, 14) + SourceIndex(0)
7 >Emitted(110, 29) Source(100, 2) + SourceIndex(0)
---
>>>//# sourceMappingURL=recursiveClassReferenceTest.js.map